CREATE DATABASE DEALERSHIP;
USE DEALERSHIP;

CREATE TABLE CAR_DEALERSHIP
(ID_CAR_DEALER INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
NAME_ VARCHAR (30), 
LOCATION VARCHAR (40));

CREATE TABLE WORKER
(USER_ VARCHAR (30) NOT NULL PRIMARY KEY,
PASSWORD_ VARCHAR (30),
ADMIN_ BOOLEAN,
ID_CAR_DEALER INT,
FOREIGN KEY (ID_CAR_DEALER) REFERENCES CAR_DEALERSHIP (ID_CAR_DEALER) ON UPDATE CASCADE ON DELETE CASCADE);

CREATE TABLE MODEL
(NAME_MODEL VARCHAR (30) NOT NULL,
MARK VARCHAR (30),
STOCK INT CHECK (STOCK>=0),
PRICE DOUBLE,
ID_CAR_DEALER INT NOT NULL,
FOREIGN KEY (ID_CAR_DEALER) REFERENCES CAR_DEALERSHIP (ID_CAR_DEALER) ON UPDATE CASCADE ON DELETE CASCADE,
PRIMARY KEY (NAME_MODEL, ID_CAR_DEALER));

CREATE TABLE CLIENT_
(USER_ VARCHAR (30) NOT NULL PRIMARY KEY, 
EMAIL VARCHAR (40), 
DNI CHAR (9), 
PASSWORD_ VARCHAR (40));

CREATE TABLE PURCHASE
(ID_PURCHASE INT AUTO_INCREMENT PRIMARY KEY,
USER_ VARCHAR (30) NOT NULL,
NAME_MODEL VARCHAR (30) NOT NULL,
ID_CAR_DEALER INT NOT NULL,
DATE_PURCHASE DATE,
QUANTITY INT,
FOREIGN KEY (USER_) REFERENCES CLIENT_ (USER_) ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY (NAME_MODEL) REFERENCES MODEL (NAME_MODEL) ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY (ID_CAR_DEALER) REFERENCES MODEL (ID_CAR_DEALER) ON UPDATE CASCADE ON DELETE CASCADE);

INSERT INTO CAR_DEALERSHIP (NAME_, LOCATION) VALUES
('AutoMadrid', 'Madrid'),
('SuperCars', 'Barcelona'),
('Valencia Motors', 'Valencia');

INSERT INTO WORKER (USER_, PASSWORD_, ADMIN_, ID_CAR_DEALER) VALUES
('juan23', 'pass123', TRUE, 1),
('maria99', 'secure456', FALSE, 1),
('pedro78', 'mypass789', TRUE, 2),
('lauraX', 'key123', FALSE, 2),
('carlos21', 'password', TRUE, 3);

INSERT INTO MODEL (NAME_MODEL, MARK, STOCK, PRICE, ID_CAR_DEALER) VALUES
('Model S', 'Tesla', 5, 70000.00, 1),
('Model 3', 'Tesla', 8, 60000.00, 1),
('Civic', 'Honda', 10, 25000.00, 2),
('Accord', 'Honda', 6, 30000.00, 2),
('Mustang', 'Ford', 3, 55000.00, 3),
('Focus', 'Ford', 7, 22000.00, 3),
('Civic', 'Honda', 4, 26000.00, 3); 

INSERT INTO CLIENT_ (DNI, EMAIL, USER_, PASSWORD_) VALUES
('12345678A', 'cliente1@email.com', 'client1', 'pass1'),
('87654321B', 'cliente2@email.com', 'client2', 'pass2'),
('11223344C', 'cliente3@email.com', 'client3', 'pass3');

INSERT INTO PURCHASE (USER_, NAME_MODEL,ID_CAR_DEALER, DATE_PURCHASE, QUANTITY) VALUES
('client1', 'Model S', 1, '2024-03-01', 1),
('client2', 'Civic', 2, '2024-03-05', 2),
('client3', 'Focus', 3, '2024-03-10', 1);

-- ***USED IN THE JAVA PROGRAM***
-- P1 INSERTS A PURCHASE AND DISCOUNTS THE AMOUNT OF MODELS BOUGHT TO THE MODEL'S STOCK
DELIMITER //
CREATE PROCEDURE REGISTER_PURCHASE (USER_2 CHAR(9), NAME_MODEL2 VARCHAR (30), ID_CAR_DEALER2 INT, DATE_PURCHASE2 DATE, QUANTITY2 INT)
BEGIN
	DECLARE STOCK_BEFORE INT;
    DECLARE QUANTITY_PURCHASE INT;
    DECLARE TIMES INT DEFAULT 0;
    
    SELECT STOCK INTO STOCK_BEFORE FROM MODEL WHERE NAME_MODEL = NAME_MODEL2 AND ID_CAR_DEALER = ID_CAR_DEALER2 ;
    SELECT COUNT(*) INTO QUANTITY_PURCHASE FROM PURCHASE;
  
		INSERT INTO PURCHASE (USER_, NAME_MODEL, ID_CAR_DEALER, DATE_PURCHASE, QUANTITY)
		VALUES 
		(USER_2, NAME_MODEL2, ID_CAR_DEALER2, DATE_PURCHASE2, QUANTITY2);
        
		IF(QUANTITY_PURCHASE=(SELECT COUNT(*) FROM PURCHASE)) THEN
			SELECT CONCAT('No se ha podido realizar la compra') AS MENSAJE;
		ELSE 
			SELECT CONCAT('Compra realizada correctamente') AS MENSAJE;
           
			WHILE (TIMES<QUANTITY2) DO
				UPDATE MODEL
				SET STOCK = STOCK -1 WHERE NAME_MODEL = NAME_MODEL2 AND ID_CAR_DEALER = ID_CAR_DEALER2;
                SET TIMES = TIMES + 1;
			END WHILE;
		END IF;
  
END //

DELIMITER ;

CALL REGISTER_PURCHASE ('client2', 'Civic', 2, '2025-03-20', 1);

-- P2 SELECTS THE MODELS THAT COSTS MORE THAN 50.000â‚¬
DELIMITER //
CREATE PROCEDURE LUXURY_MODELS ()
BEGIN
	DECLARE NAME_M VARCHAR (30);
    DECLARE PRICE_M DOUBLE;
    DECLARE STOCK_M INT;
    DECLARE END_C BOOL DEFAULT 0;
    DECLARE C CURSOR FOR SELECT NAME_MODEL, PRICE, STOCK FROM MODEL WHERE PRICE>50000;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET END_C = 1;
    
    OPEN C;
    FETCH C INTO NAME_M, PRICE_M, STOCK_M;
    WHILE END_C = 0 DO
		SELECT CONCAT('NOMBRE DE MODELO: ',  NAME_M, ' PRECIO: ', PRICE_M, ' CANTIDAD: ', STOCK_M) AS MENSAJE;
        FETCH C INTO NAME_M, PRICE_M, STOCK_M ;
	END WHILE;
END //
DELIMITER ;
DROP PROCEDURE LUXURY_MODELS;
CALL LUXURY_MODELS;

-- P3 SELECTS THE MODELS THAT HAVE LOWER THAN 5 OF STOCK
DELIMITER //
CREATE PROCEDURE LOW_STOCK_MODELS ()
BEGIN
    DECLARE NAME_M VARCHAR(30);
    DECLARE STOCK_M INT;
    DECLARE PRICE_M DOUBLE;
    DECLARE END_C BOOL DEFAULT 0;
    DECLARE C CURSOR FOR 
    SELECT NAME_MODEL, STOCK, PRICE FROM MODEL WHERE STOCK < 5;

    DECLARE CONTINUE HANDLER FOR NOT FOUND 
        SET END_C = 1;
        
    OPEN C;
		FETCH C INTO NAME_M, STOCK_M, PRICE_M;

		WHILE END_C = 0 DO
			SELECT CONCAT('MODELO: ', NAME_M, ' STOCK: ', STOCK_M, ' PRECIO: ', PRICE_M) AS MENSAJE;

			FETCH C INTO NAME_M, STOCK_M, PRICE_M;
		END WHILE;
    CLOSE C;
END //

DELIMITER ;
CALL LOW_STOCK_MODELS;

-- F4 RETURNS THE QUANTITY OF MODELS WITH A LOWER STOCK THAN A PARAMETER

DELIMITER //

CREATE FUNCTION COUNT_MODELS_BY_MIN_STOCK(MIN_STOCK INT) RETURNS INT
READS SQL DATA DETERMINISTIC
BEGIN
    DECLARE COUNT_MODELS INT DEFAULT 0;

    IF MIN_STOCK < 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Stock cannot be negative';
    END IF;
    
    SELECT COUNT(*) INTO COUNT_MODELS FROM MODEL WHERE STOCK < MIN_STOCK;

    RETURN COUNT_MODELS;
END //

DELIMITER ;
SELECT COUNT_MODELS_BY_MIN_STOCK(2);

-- F5 COUNT THE NUMBER OF WORKER OF AN SPECIFIC CAR DEALERSHIP
DELIMITER //
CREATE FUNCTION COUNT_WORKERS_BY_CARDEALER (ID_CARDEALER2 INT) RETURNS INT
READS SQL DATA
BEGIN 
	DECLARE COUNT_WORKERS INT DEFAULT 0;
    
	SELECT COUNT(*) INTO COUNT_WORKERS FROM WORKER WHERE ID_CAR_DEALER = ID_CARDEALER2;
    
    RETURN COUNT_WORKERS;
END //

DELIMITER ;
SELECT COUNT_WORKERS_BY_CARDEALER(1);

-- F6 TOTAL CARS IN A CARDEALERSHIP
DELIMITER //
CREATE FUNCTION COUNT_TOTAL_CARS_BY_CARDEALERSHIP(ID_CARDEALERSHIP2 INT) RETURNS INT
READS SQL DATA
BEGIN
	DECLARE CAR_NUMBER INT;
		SELECT SUM(STOCK) INTO CAR_NUMBER FROM MODEL WHERE ID_CAR_DEALER = ID_CARDEALERSHIP2;
	RETURN CAR_NUMBER;
END //

DELIMITER ;
SELECT COUNT_TOTAL_CARS_BY_CARDEALERSHIP(2);

-- P7 
DELIMITER //
CREATE PROCEDURE CLIENT_PURCHASE(ID_CARDEALERSHIP2 INT)
BEGIN 
    DECLARE END_C INT DEFAULT 0;
    DECLARE USER_2 VARCHAR(30);
    DECLARE NAME_MODEL2 VARCHAR(30);
	DECLARE ID_CAR_DEALER2 INT;
    DECLARE DATE_PURCHASE2 DATE;
    DECLARE QUANTITY2 INT;
    DECLARE ID INT;
    DECLARE FOUND_ INT DEFAULT 1;
	DECLARE C CURSOR FOR SELECT USER_, NAME_MODEL,ID_CAR_DEALER, DATE_PURCHASE, QUANTITY FROM PURCHASE WHERE ID_CAR_DEALER = ID_CARDEALERSHIP2;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET END_C = 1;
    DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET FOUND_ = 0;
	
    SELECT ID_PURCHASE FROM PURCHASE WHERE ID_CAR_DEALER = ID_CARDEALERSHIP2;

	IF FOUND_ = 0 THEN 
		SELECT CONCAT('Not cardealership found');
	ELSE
		OPEN C;
			FETCH C INTO USER_2, NAME_MODEL2, ID_CAR_DEALER2, DATE_PURCHASE2, QUANTITY2;
			
			WHILE END_C = 0 DO
				SELECT CONCAT('USER: ', USER_2, ' NAME: ', NAME_MODEL2, '  ID: ', ID_CAR_DEALER2, ' DATE: ', DATE_PURCHASE2, 'QUANTITY: ', QUANTITY2 ) AS 'DATOS COMPRA';
				FETCH C INTO USER_2, NAME_MODEL2, ID_CAR_DEALER2, DATE_PURCHASE2, QUANTITY2;
			END WHILE;
		END IF;
		CLOSE C;
END // 

DELIMITER ;
DROP PROCEDURE CLIENT_PURCHASE;
CALL CLIENT_PURCHASE(3);

-- P8 RETURNS THE QUANTITY OF ADMINISTRATORS OF AN SPECIFIC CARDEALERSHIPS
DELIMITER //
CREATE PROCEDURE ADMINS(CAR_DEALERSHIP2 INT)
BEGIN
	DECLARE QUANTITY INT;
	DECLARE NAME_ADMIN VARCHAR(30);
    DECLARE FOUND_ INT DEFAULT 1;
    DECLARE NAME_CARDELER VARCHAR(30);
	DECLARE CONTINUE HANDLER FOR 1329 SET FOUND_ = 0;
   
	SELECT USER_ INTO NAME_ADMIN FROM WORKER WHERE ADMIN_ = TRUE AND ID_CAR_DEALER=CAR_DEALERSHIP2;
    
    IF FOUND_ = 0 THEN
		SELECT CONCAT('That cardelarship ID does not exits') as MENSAJE;
	ELSE
		SELECT COUNT(*) INTO QUANTITY FROM WORKER WHERE ADMIN_ = TRUE AND ID_CAR_DEALER=CAR_DEALERSHIP2;
        SELECT NAME_ INTO NAME_CARDELER FROM CAR_DEALERSHIP WHERE ID_CAR_DEALER = CAR_DEALERSHIP2;
        SELECT CONCAT(QUANTITY, ' administrator(s) in ', NAME_CARDELER, 'cardealer') as MENSAJE;
	END IF;
    
END //
DELIMITER ;
DROP PROCEDURE ADMINS;
CALL ADMINS(1);



